# thread-pool
org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount=1
org.quartz.jobStore.isClustered=true
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread=true 
#org.quartz.jobStore.misfireThreshold=30000
##misfireThreshold (en milisegundos), con un valor predeterminado de 60000 (un minuto). Define qué tan tarde debe estar el trigger para que se considere fallado. Con la configuración predeterminada, si se suponía que el disparador se dispararía hace 30 segundos, Quartz lo ejecutará felizmente. Tal retraso no se considera fallo de encendido.
org.quartz.scheduler.instanceName=ClusterQscannScheduler
org.quartz.scheduler.instanceId=AUTO
org.quartz.scheduler.skipUpdateCheck=true
org.quartz.jobStore.misfireThreshold=30000
org.quartz.jobStore.clusterCheckinInterval=60000
##skipUpdateCheck: Quartz contiene una función de "comprobación de actualización" que se conecta a un servidor para comprobar si hay una nueva versión de Quartz disponible para descargar.
org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.PostgreSQLDelegate

org.quartz.dataSource.quartzDataSource.URL=jdbc:postgresql://localhost:5432/quartz
org.quartz.dataSource.quartzDataSource.driver=org.postgresql.Driver
org.quartz.dataSource.quartzDataSource.user=postgres
org.quartz.dataSource.quartzDataSource.password=abcd1234*
org.quartz.jdbc.initialize-schema=never